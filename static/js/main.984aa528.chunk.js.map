{"version":3,"sources":["components/Home.js","components/NavBar.js","components/NasaPhoto.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","NavBar","apiKey","process","NasaPhoto","useState","photoData","setPhotoData","useEffect","a","fetch","res","json","data","fetchPhoto","media_type","src","url","alt","title","frameBorder","gesture","allow","allowFullScreen","date","explanation","particlesOptions","App","params","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.984aa528.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Home(){\r\n    return (\r\n       <>\r\n        <div className=\"home\">\r\n        <Link className=\"home-link\" to=\"/nasaphoto\">Click to view Astronomy Picture of the Day</Link>\r\n\r\n        </div>\r\n        <div className=\"description\">\r\n        Astronomy Picture of the Day is a website provided by NASA and Michigan Technological University. According to the website, \"Each day a different image or photograph of our universe is featured, along with a brief explanation written by a professional astronomer.\" The photograph does not necessarily correspond to a celestial event on the exact day that it is displayed, and images are sometimes repeated. However, the pictures and descriptions often relate to current events in astronomy and space exploration. The text has several hyperlinks to more pictures and websites for more information. The images are either visible spectrum photographs, images taken at non-visible wavelengths and displayed in false color, video footage, animations, artist's conceptions, or micrographs that relate to space or cosmology. Past images are stored in the APOD Archive, with the first image appearing on June 16, 1995. This initiative has received support from NASA, the National Science Foundation, and MTU. The images are sometimes authored by people or organizations outside NASA, and therefore APOD images are often copyrighted, unlike many other NASA image galleries.\r\n        </div>\r\n       </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <div className=\"navbar\">\r\n        <ul>\r\n        <Link className=\"link\" to=\"/\">Take me Home</Link>\r\n        </ul>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport NavBar from './NavBar';\r\n\r\nconst apiKey = process.env.REACT_APP_NASA_KEY;\r\n\r\nexport default function NasaPhoto(){\r\n    const [photoData, setPhotoData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchPhoto();\r\n\r\n\r\n        async function fetchPhoto(){\r\n            const res = await fetch(\r\n                `https://api.nasa.gov/planetary/apod?api_key=${apiKey}`\r\n            );\r\n            const data = await res.json();\r\n            setPhotoData(data);\r\n        }\r\n    }, []);\r\n\r\n    if(!photoData) return <div/>;\r\n\r\n    return (\r\n        <>\r\n        <NavBar/>\r\n        <div className=\"nasa-photo\">\r\n            { photoData.media_type === \"image\" ? (\r\n            <img\r\n            src={photoData.url}\r\n            alt={photoData.title}\r\n            className=\"photo\"\r\n            />\r\n            ) : (\r\n            <iframe\r\n            title=\"space-video\"\r\n            src={photoData.url}\r\n            frameBorder=\"0\"\r\n            gesture=\"media\"\r\n            allow=\"encrypted-media\"\r\n            allowFullScreen\r\n            className=\"photo\"\r\n            />\r\n        )}\r\n        \r\n            <div className=\"pic\">\r\n                <h1>{photoData.title}</h1>\r\n                <p className=\"date\">{photoData.date}</p>\r\n                <p className=\"explanation\">{photoData.explanation}</p>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Particles from 'react-particles-js';\nimport NasaPhoto from \"./components/NasaPhoto\";\nimport './App.css';\n\nconst particlesOptions = {\n    \"particles\": {\n      \"number\": {\n        \"value\": 100,\n        \"density\": {\n          \"enable\": true,\n          \"value_area\": 700\n        }\n      },\n      \"color\": {\n        \"value\": \"#ffffff\"\n      },\n      \"shape\": {\n        \"type\": \"star\",\n        \"stroke\": {\n          \"width\": 4,\n          \"color\": \"#420202\"\n        },\n        \"polygon\": {\n          \"nb_sides\": 10\n        },\n        \"image\": {\n          \"src\": \"img/github.svg\",\n          \"width\": 200,\n          \"height\": 200\n        }\n      },\n      \"opacity\": {\n        \"value\": 0.8,\n        \"random\": true,\n        \"anim\": {\n          \"enable\": true,\n          \"speed\": 1,\n          \"opacity_min\": 0.1,\n          \"sync\": false\n        }\n      },\n      \"size\": {\n        \"value\": 3,\n        \"random\": true,\n        \"anim\": {\n          \"enable\": false,\n          \"speed\": 40,\n          \"size_min\": 0.1,\n          \"sync\": false\n        }\n      },\n      \"line_linked\": {\n        \"enable\": true,\n        \"distance\": 150,\n        \"color\": \"#ffffff\",\n        \"opacity\": 0.2,\n        \"width\": 1\n      },\n      \"move\": {\n        \"enable\": true,\n        \"speed\": 7,\n        \"direction\": \"none\",\n        \"random\": false,\n        \"straight\": false,\n        \"out_mode\": \"out\",\n        \"bounce\": true,\n        \"attract\": {\n          \"enable\": false,\n          \"rotateX\": 600,\n          \"rotateY\": 1200\n        }\n      }\n    },\n    \"interactivity\": {\n      \"detect_on\": \"canvas\",\n      \"events\": {\n        \"onhover\": {\n          \"enable\": true,\n          \"mode\": \"repulse\"\n        },\n        \"onclick\": {\n          \"enable\": true,\n          \"mode\": \"push\"\n        },\n        \"resize\": true\n      },\n      \"modes\": {\n        \"grab\": {\n          \"distance\": 400,\n          \"line_linked\": {\n            \"opacity\": 1\n          }\n        },\n        \"bubble\": {\n          \"distance\": 400,\n          \"size\": 40,\n          \"duration\": 2,\n          \"opacity\": 8,\n          \"speed\": 3\n        },\n        \"repulse\": {\n          \"distance\": 200,\n          \"duration\": 0.4\n        },\n        \"push\": {\n          \"particles_nb\": 4\n        },\n        \"remove\": {\n          \"particles_nb\": 2\n        }\n      }\n    },\n    \"retina_detect\": true\n  }\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <Particles className=\"particles\"\n    params={particlesOptions}/>\n    <div className=\"app\">\n    \n    <Route component={Home} path=\"/\" exact /> \n    <Route component={NasaPhoto} path=\"/nasaphoto\" />\n   \n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}